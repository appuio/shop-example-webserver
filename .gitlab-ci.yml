stages:
  - build
  - deploy-staging
  - deploy-preprod
  - deploy-prod

variables:
  CLUSTER_IP_STAGING: 172.30.215.173
  CLUSTER_IP_PREPROD: 172.30.29.25
  CLUSTER_IP_PROD: 172.30.31.200
  NODE_VERSION: 6.10-alpine
  OC_REGISTRY_URL: registry.appuio.ch
  OC_REGISTRY_IMAGE: $OC_REGISTRY_URL/$KUBE_NAMESPACE/webserver
  OC_VERSION: 1.3.3
  YARN_CACHE: .yarn

.yarn_install: &yarn_install
  - yarn install --cache-folder="$YARN_CACHE"

.yarn_cache: &yarn_cache
  cache:
    key: $CI_PROJECT_ID
    paths:
      - $YARN_CACHE
      - node_modules

.login_oc: &login_oc
  - oc login $KUBE_URL --token=$KUBE_TOKEN

.login_docker: &login_docker
  - docker login -u serviceaccount -p `oc whoami -t` $OC_REGISTRY_URL

.replace_deploy_vars: &replace_deploy_vars 
  - sed -i 's;webserver-staging;webserver-'"$DEPLOY_ENV"';g' docker/openshift/*
  - sed -i 's;webserver:latest;webserver:'"$DEPLOY_TAG"';g' docker/openshift/*

.replace_cluster_ip: &replace_cluster_ip
  - sed -i 's;'$CLUSTER_IP_STAGING';'$CLUSTER_IP';g' docker/openshift/*

.replace_oc_objects: &replace_oc_objects
  - oc replace -f docker/openshift -R

mirror:
  stage: build
  image: samueldebruyn/debian-git:latest
  script:
    # add the github ssh key to known hosts to prevent host key verification failures
    - mkdir -p ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    # push to the GitHub repository
    - ssh-agent bash -c 'ssh-add <(echo "$DEPLOY_KEY"); git push --force git@github.com:appuio/shop-example-webserver.git origin/master:master'
  allow_failure: true

test:
  stage: build
  image: node:$NODE_VERSION
  script:
    # install necessary application packages
    *yarn_install
    # test the application sources
    - yarn test
  <<: *yarn_cache
  # TODO: remove once issue is fixed
  allow_failure: true

compile:
  stage: build
  image: node:$NODE_VERSION
  script:
    # install necessary application packages
    *yarn_install
    # build the application sources
    - yarn build
  artifacts:
    expire_in: 5min
    paths:
      - build
  <<: *yarn_cache
  only:
    - master
    - tags

build-staging:
  environment: webserver-staging
  stage: deploy-staging
  image: appuio/gitlab-runner-oc:$OC_VERSION
  services:
    - docker:dind
  variables:
    DEPLOY_ENV: staging
    DEPLOY_TAG: latest
  script:
    # login to the service account to get access to the internal registry
    <<: *login_oc
    <<: *login_docker
    # build the docker image and tag it as latest
    # use the current latest image as a caching source
    - docker pull $OC_REGISTRY_IMAGE:latest
    - docker build --cache-from $OC_REGISTRY_IMAGE:latest -t $OC_REGISTRY_IMAGE:latest .
    # update the configuration in OpenShift
    <<: *replace_oc_objects
    # push the image to the internal registry
    - docker push $OC_REGISTRY_IMAGE:latest
    # trigger a deployment
    - oc deploy webserver-staging --latest --follow
  only:
    - master
  except:
    - tags
  tags:
    - dockerbuild

build-preprod:
  environment: webserver-preprod
  stage: deploy-preprod
  image: appuio/gitlab-runner-oc:$OC_VERSION
  services:
    - docker:dind
  variables:
    CLUSTER_IP: 172.30.29.25
    DEPLOY_ENV: preprod
    DEPLOY_TAG: stable
  script:
    # login to the service account to get access to the internal registry
    <<: *login_oc
    <<: *login_docker
    # build the docker image and tag it as stable
    # use the current latest image as a caching source
    - docker pull $OC_REGISTRY_IMAGE:latest
    - docker build --cache-from $OC_REGISTRY_IMAGE:latest -t $OC_REGISTRY_IMAGE:stable .
    # update the configuration in OpenShift
    <<: *replace_deploy_vars
    <<: *replace_cluster_ip
    <<: *replace_oc_objects
    # push the image to the internal registry
    - docker push $OC_REGISTRY_IMAGE:stable
    # trigger a deployment
    - oc deploy webserver-preprod --latest --follow
  only:
    - tags
  tags:
    - dockerbuild

build-prod:
  environment: webserver-prod
  stage: deploy-prod
  image: appuio/gitlab-runner-oc:$OC_VERSION
  variables:
    CLUSTER_IP: 172.30.31.200
    DEPLOY_ENV: prod
    DEPLOY_TAG: live
  script:
    # login to the service account to get access to the CLI
    <<: *oc_login
    # update the configuration in OpenShift
    <<: *replace_deploy_vars
    <<: *replace_cluster_ip
    <<: *replace_oc_objects
    # tag the current stable image as live
    - oc tag webserver:stable webserver:live
    # trigger a deployment
    - oc deploy webserver-prod --latest --follow
  only:
    - tags
  when: manual
